{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "flexar",
	"scopeName": "source.fl",
	"patterns": [
		{
			"include": "#string"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#class"
		},
		{
			"include": "#interface"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#enum-values"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#func"
		},
		{
			"include": "#class-body"
		}
	],
	"repository": {
		"string": {
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.flexar"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.flexar"
				}
			},
			"patterns": [
				{
					"name": "string.tm",
					"match": "[^\"]"
				}
			]
		},
		"imports": {
			"begin": "\\b(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "constant"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "punctuation.terminator.flexar"
				}
			},
			"patterns":[
				{
					"name": "entity.name.function.edge.flexar",
					"match": "\\b(use|as)\\b"
				},
				{
					"match": "(::)([a-zA-Z]\\w*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.flexar"
						},
						"2": {
							"name": "entity.name.function.flexar"
						}
					}
				},
				{
					"name": "entity.name.package.go",
					"match": "[a-zA-Z]\\w*"
				},
				{
					"name": "punctuation.separator.flexar",
					"match": "[,|\\.]"
				}
				
			]
		},
		"namespace": {
			"begin": "\\b(namespace)\\s+",
			"beginCaptures": {
				"1": {
					"name": "constant"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "punctuation.terminator.flexar"
				}
			},
			"patterns":[
				{
					"match": "([a-zA-Z]\\w*)",
					"captures": {
						"1": {
							"name": "entity.name.package.go"
						}
					}
				},
				{
					"match": "(\\.)([a-zA-Z]\\w*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.flexar"
						},
						"2": {
							"name": "entity.name.package.go"
						}
					}
				}
			]
			
		},
		"class": {
			"begin": "(\\b(?:export|abstract)\\b)?\\s*\\b(class)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type.class"
				}
			},
			"end": "(?=\\{)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.flexar"
				}
			},
			"patterns":[
				{
					"name": "storage.modifier",
					"match": "\\b(?:extends|implements)\\b"
				},
				{
					"name": "entity.name.type.class",
					"match": "[a-zA-Z]\\w*"
				},
				{
					"name": "punctuation.separator.flexar",
					"match": "[,|\\.]"
				}
			]
		},
		"interface":{
			"begin": "(\\b(?:export)\\b)?\\s*\\b(interface)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type.class"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.flexar"
				}
			},
			"patterns":[
				{
					"begin": "(\\b(?:export)\\b)?\\s*\\b(interface)\\b\\s+",
					"end": "\\{",
					"patterns": [
						{
							"name": "storage.modifier",
							"match": "\\b(?:extends)\\b"
						},
						{
							"name": "entity.name.type.class",
							"match": "[a-zA-Z]\\w*"
						},
						{
							"name": "punctuation.separator.flexar",
							"match": "[,|\\.]"
						}
					]
				}
			]
		},
		"enum": {
			"begin": "(\\b(?:export)\\b)?\\s*\\b(enum)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type.class"
				}
			},
			"end": "(?=\\{)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.flexar"
				}
			},
			"patterns":[
				{
					"name": "entity.name.type.class",
					"match": "[a-zA-Z]\\w*"
				},
				{
					"name": "punctuation.separator.flexar",
					"match": "[,|\\.]"
				}
			]
		},
		"enum-values": {
			"begin": "(?<=enum.*)\\{",
			"end": "\\}",
			"patterns":[
				{
					"name": "constant.other.enum",
					"match": "[a-zA-Z]\\w*"
				},
				{
					"name": "punctuation.separator.flexar",
					"match": "[,|\\.]"
				},
				{
					"match": "(=)\\s*((\\d+|dyn)|(\"[^\"]*\"))",
					"captures": {
						"1": {
							"name": "punctuation.separator.flexar"
						},
						"3": {
							"name": "constant.numeric"
						},
						"4": {
							"name": "string"
						}
					}
				}
			]
		},
		"struct": {
			"begin": "(\\b(?:export)\\b)?\\s*\\b(struct)\\b\\s+([a-zA-Z]\\w*)\\s+(?:(extends)\\s+(?:([a-zA-Z]\\w*)(?:(\\.)([a-zA-Z]\\w*))*)\\s*(?:(,)\\s*([a-zA-Z]\\w*(\\.[a-zA-Z]\\w*)*))*)?\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type.class"
				},
				
				"3":{
					"name": "entity.name.type.class"
				},
				"4":{
					"name": "storage.modifier"
				},
				"5": {
					"name": "entity.name.type.class"
				},
				"6": {
					"name": "punctuation.separator.flexar"
				},
				"7": {
					"name": "entity.name.type.class"
				},
				"8": {
					"name": "punctuation.separator.flexar"
				},
				"9": {
					"name": "entity.name.type.class"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.flexar"
				}
			},
			"patterns":[
				{
					"include": "#struct-attr"
				}
			]
		},
		"struct-attr": {
			"match": "([a-zA-Z]\\w*)\\s*(:)\\s*([a-zA-Z]\\w*)",
			"captures": {
				"1": {
					"name": "entity.name.type.class"
				},
				"2": {
					"name": "punctuation.separator.flexar"
				},
				"3": {
					"name": "entity.name.package.go"
				}
			}
		},
		"func": {
			"begin": "(\\b(?:export)\\b)?\\s*\\b(func)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type.class"
				}
			},
			"end": "\\(",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.begin.flexar"
				}
			},
			"patterns":[
				{
					"name": "entity.name.type.class",
					"match": "[a-zA-Z]\\w*"
				},
				{
					"name": "punctuation.separator.flexar",
					"match": "[,|\\.]"
				}
			]
		}
	}
}